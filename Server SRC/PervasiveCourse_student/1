package edu.rit.csci759.jsonrpc.server;

/**
 * Demonstration of the JSON-RPC 2.0 Server framework usage. The request
 * handlers are implemented as static nested classes for convenience, but in 
 * real life applications may be defined as regular classes within their old 
 * source files.
 *
 * @author Vladimir Dzhuvinov
 * @version 2011-03-05
 */

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Error;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Request;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;
import com.thetransactioncompany.jsonrpc2.server.MessageContext;
import com.thetransactioncompany.jsonrpc2.server.RequestHandler;

import edu.rit.csci759.rspi.utils.MCP3008ADCReader;

public class JsonHandler {

	// Implements a handler for an "echo" JSON-RPC method
	public static class EchoHandler implements RequestHandler {

		// Reports the method names of the handled requests
		public String[] handledRequests() {

			return new String[] { "echo" };
		}

		// Processes the requests
		public JSONRPC2Response process(JSONRPC2Request req, MessageContext ctx) {

			if (req.getMethod().equals("echo")) {

				// Echo first parameter

				List params = (List) req.getParams();

				Object input = params.get(0);

				return new JSONRPC2Response(input, req.getID());
			} else {

				// Method name not supported

				return new JSONRPC2Response(JSONRPC2Error.METHOD_NOT_FOUND,
						req.getID());
			}
		}
	}

	// Implements a handler for an "echo" JSON-RPC method
	public static class TemperatureHandler implements RequestHandler {

		// Reports the method names of the handled requests
		public String[] handledRequests() {

			return new String[] { "getTemperature"  };
		}

		// Processes the requests
		public JSONRPC2Response process(JSONRPC2Request req, MessageContext ctx) {

			String hostname = "unknown";
			try {
				hostname = InetAddress.getLocalHost().getHostName();
			} catch (UnknownHostException e) {
				e.printStackTrace();
			}
			if (req.getMethod().equals("getDate")) {

				DateFormat df = DateFormat.getDateInstance();

				String date = df.format(new Date());

				return new JSONRPC2Response(hostname + " " + date, req.getID());

			} else if (req.getMethod().equals("getTime")) {

				DateFormat df = DateFormat.getTimeInstance();

				String time = df.format(new Date());

				return new JSONRPC2Response(hostname + " " + time, req.getID());
			}  
			else if (req.getMethod().equals("getTemperature")) {


				String temperature = new JsonHandler().getTemperature();

				return new JSONRPC2Response(hostname + " " + temperature, req.getID());
			}
			else {

				// Method name not supported

				return new JSONRPC2Response(JSONRPC2Error.METHOD_NOT_FOUND,
						req.getID());
			}
		}
		
	}

 public String getTemperature(){

                        final boolean DEBUG = false;

                        GpioController gpio = GpioFactory.getInstance();
                        MCP3008ADCReader.initSPI(gpio);



                                /*
                                 * Reading ambient light from the photocell sensor using the MCP3008 ADC
                                 */
                                int adc_ambient = MCP3008ADCReader.readAdc(MCP3008ADCReader.MCP3008_input_channels.CH1.ch());
                                // [0, 1023] ~ [0x0000, 0x03FF] ~ [0&0, 0&1111111111]
                                // convert in the range of 1-100
                                int ambient = (int)(adc_ambient / 10.24);

                                if (DEBUG){
                                        System.out.println("readAdc:" + Integer.toString(adc_ambient) +
                                                        " (0x" + MCP3008ADCReader.lpad(Integer.toString(adc_ambient, 16).toUpperCase(), "0", 2) +
                                                        ", 0&" + MCP3008ADCReader.lpad(Integer.toString(adc_ambient, 2), "0", 8) + ")");
                                        System.out.println("Ambient:" + ambient + "/100 (" + adc_ambient + "/1024)");
                                }


                                /*
                                 * Reading temperature from the TMP36 sensor using the MCP3008 ADC
                                 */
                                int adc_temperature = MCP3008ADCReader.readAdc(MCP3008ADCReader.MCP3008_input_channels.CH0.ch());
                                // [0, 1023] ~ [0x0000, 0x03FF] ~ [0&0, 0&1111111111]
                                // convert in the range of 1-100
                                int temperature = (int)(adc_temperature / 10.24);

                                if (DEBUG){
                                        System.out.println("readAdc:" + Integer.toString(adc_temperature) +
                                                        " (0x" + MCP3008ADCReader.lpad(Integer.toString(adc_temperature, 16).toUpperCase(), "0", 2) +
                                                        ", 0&" + MCP3008ADCReader.lpad(Integer.toString(adc_temperature, 2), "0", 8) + ")");
                                        System.out.println("Temperature:" + temperature + "/100 (" + adc_temperature + "/1024)");
                                }

                                float tmp36_mVolts =(float) (adc_temperature * (3300.0/1024.0));
                                // 10 mv per degree
                        float temp_C = (float) (((tmp36_mVolts - 100.0) / 10.0) - 40.0);
                        // convert celsius to fahrenheit
                        float temp_F = (float) ((temp_C * 9.0 / 5.0) + 32);

                        System.out.println("Ambient:" + ambient + "/100; Temperature:"+temperature+"/100 => "+String.valueOf(temp_C)+"C => "+String.valueOf(temp_F)+"F");


                                try { Thread.sleep(500L); } catch (InterruptedException ie) { ie.printStackTrace(); }
                        System.out.println("Bye...");
                        gpio.shutdown();

                        return String.valueOf(temperature);


                }

			
		
		
	
	

	// Implements a handler for "getDate" and "getTime" JSON-RPC methods
	// that return the current date and time
	public static class DateTimeHandler implements RequestHandler {

		// Reports the method names of the handled requests
		public String[] handledRequests() {

			return new String[] { "getDate", "getTime"};
		}

		// Processes the requests
		public JSONRPC2Response process(JSONRPC2Request req, MessageContext ctx) {

			String hostname = "unknown";
			try {
				hostname = InetAddress.getLocalHost().getHostName();
			} catch (UnknownHostException e) {
				e.printStackTrace();
			}
			if (req.getMethod().equals("getDate")) {

				DateFormat df = DateFormat.getDateInstance();

				String date = df.format(new Date());

				return new JSONRPC2Response(hostname + " " + date, req.getID());

			} else if (req.getMethod().equals("getTime")) {

				DateFormat df = DateFormat.getTimeInstance();

				String time = df.format(new Date());

				return new JSONRPC2Response(hostname + " " + time, req.getID());
			}  
			else {

				// Method name not supported

				return new JSONRPC2Response(JSONRPC2Error.METHOD_NOT_FOUND,
						req.getID());
			}
		}
	}
}

